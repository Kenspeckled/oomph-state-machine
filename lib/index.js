// Generated by CoffeeScript 1.9.3
(function() {
  var Promise, stateMachine, stateMachineMethods;

  Promise = require('promise');

  stateMachineMethods = {
    currentState: function() {
      if (this[this.constructor._stateAttribute]) {
        return this[this.constructor._stateAttribute];
      } else {
        return this.constructor._defaultState;
      }
    },
    currentStateIs: function(testState) {
      return this.currentState() === testState;
    },
    canTransitionStateTo: function(newState) {
      var oldState;
      oldState = this.currentState();
      return this.constructor._states[oldState].hasOwnProperty(newState);
    },
    transitionStateTo: function(newState) {
      var oldState, returnArray, stateCallbacks;
      oldState = this.currentState();
      if (!this.canTransitionStateTo(newState)) {
        throw new Error('Cannot transition state from ' + oldState + ' to ' + newState);
      }
      stateCallbacks = this.constructor._states[oldState][newState];
      if (stateCallbacks && Object.prototype.toString.call(stateCallbacks) === '[object Array]' && stateCallbacks.length > 0) {
        returnArray = [];
        stateCallbacks.forEach((function(_this) {
          return function(fn) {
            return returnArray.push(fn.call(_this));
          };
        })(this));
        return Promise.all(returnArray).then((function(_this) {
          return function() {
            _this[_this.constructor._stateAttribute] = newState;
            return _this;
          };
        })(this));
      } else {
        return new Promise((function(_this) {
          return function(resolve) {
            _this[_this.constructor._stateAttribute] = newState;
            return resolve(_this);
          };
        })(this));
      }
    }
  };

  stateMachine = {
    registerStateMachine: function(args) {
      if (!args.hasOwnProperty('stateAttribute')) {
        throw new Error('stateAttribute not defined');
      }
      if (!args.hasOwnProperty('states')) {
        throw new Error('states not defined');
      }
      if (!args.hasOwnProperty('defaultState')) {
        throw new Error('defaultState not defined');
      }
      this._stateAttribute = args.stateAttribute;
      this._states = args.states;
      this._defaultState = args.defaultState;
      this.prototype.currentState = stateMachineMethods.currentState;
      this.prototype.currentStateIs = stateMachineMethods.currentStateIs;
      this.prototype.canTransitionStateTo = stateMachineMethods.canTransitionStateTo;
      return this.prototype.transitionStateTo = stateMachineMethods.transitionStateTo;
    }
  };

  module.exports = stateMachine;

}).call(this);
